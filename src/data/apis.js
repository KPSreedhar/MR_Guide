export const apis = [
  {
    id: 1,
    name: "OpenWeatherMap",
    category: "weather",
    icon: "‚òÅÔ∏è",
    description: "Weather data, forecasts, and historical information.",
    problem: "Fetch live weather without building your own meteo system.",
    install: "npm install openweathermap-ts",
    codeExample: `import { OpenWeatherMap } from 'openweathermap-ts';\nconst weather = new OpenWeatherMap({ apiKey: 'YOUR_KEY' });\nconst data = await weather.getCurrentWeatherByCityName({ cityName: 'London' });\nconsole.log(data.weather[0].description);`,
    useCases: ["Weather apps", "Travel sites", "Agriculture dashboards"],
    pros: ["Global coverage", "Forecasts & history", "Easy setup"],
    docsLink: "https://openweathermap.org/api",
    difficulty: "beginner",
    popularity: 5,
    authRequired: true,
    authType: "API Key",
    rateLimit: "60 calls/minute (free tier)",
    pricing: "Freemium",
    status: "active",
    tags: ["weather", "forecast", "climate"],
    lastUpdated: "2023-11-20",
    freeTier: true,
    githubStars: "5K+",
  },
  {
    id: 2,
    name: "Twilio API",
    category: "communication",
    icon: "üìû",
    description: "SMS, voice, video, and WhatsApp messaging service.",
    problem: "Send reliable messages and calls without telecom setup.",
    install: "npm install twilio",
    codeExample: `const twilio = require('twilio');\nconst client = new twilio('ACCOUNT_SID', 'AUTH_TOKEN');\nawait client.messages.create({ body: 'Hello!', from: '+1234567890', to: '+0987654321' });`,
    useCases: ["SMS alerts", "2FA", "Customer support"],
    pros: ["Global reach", "Multi-channel", "Scalable"],
    docsLink: "https://www.twilio.com/docs/usage/api",
    difficulty: "intermediate",
    popularity: 5,
    authRequired: true,
    authType: "API Key / Token",
    rateLimit: "Unlimited (depends on plan)",
    pricing: "Pay-as-you-go",
    status: "active",
    tags: ["sms", "voice", "chat"],
    lastUpdated: "2023-11-20",
    freeTier: false,
    githubStars: "4K+",
  },
  {
    id: 3,
    name: "Stripe API",
    category: "payments",
    icon: "üí≥",
    description: "Payments, subscriptions, and financial infrastructure.",
    problem: "Accept online payments without managing PCI compliance.",
    install: "npm install stripe",
    codeExample: `const stripe = require('stripe')('YOUR_SECRET_KEY');\nconst payment = await stripe.paymentIntents.create({ amount: 1000, currency: 'usd' });\nconsole.log(payment.status);`,
    useCases: ["E-commerce", "SaaS billing", "Marketplaces"],
    pros: ["Global support", "Secure", "Extensive SDKs"],
    docsLink: "https://stripe.com/docs/api",
    difficulty: "intermediate",
    popularity: 5,
    authRequired: true,
    authType: "API Key",
    rateLimit: "100 requests/sec",
    pricing: "Pay-per-transaction",
    status: "active",
    tags: ["payments", "billing", "ecommerce"],
    lastUpdated: "2023-11-20",
    freeTier: false,
    githubStars: "8K+",
  },
  {
    id: 4,
    name: "NewsAPI",
    category: "news",
    icon: "üì∞",
    description: "Access headlines and news articles from multiple sources.",
    problem: "Aggregate news feeds without scraping sites.",
    install: "npm install newsapi",
    codeExample: `const NewsAPI = require('newsapi');\nconst newsapi = new NewsAPI('YOUR_KEY');\nconst res = await newsapi.v2.topHeadlines({ country: 'us' });\nconsole.log(res.articles[0].title);`,
    useCases: ["News apps", "Stock analysis", "Media monitoring"],
    pros: ["Multiple sources", "Filter by region/category", "JSON format"],
    docsLink: "https://newsapi.org/docs",
    difficulty: "beginner",
    popularity: 4,
    authRequired: true,
    authType: "API Key",
    rateLimit: "500 requests/day (free tier)",
    pricing: "Freemium",
    status: "active",
    tags: ["news", "media", "headlines"],
    lastUpdated: "2023-11-20",
    freeTier: true,
    githubStars: "3K+",
  },
  {
    id: 5,
    name: "Google Maps API",
    category: "location",
    icon: "üó∫Ô∏è",
    description: "Maps, places, routes, and geocoding by Google.",
    problem: "Add maps & geolocation without hosting GIS infrastructure.",
    install: "npm install @googlemaps/js-api-loader",
    codeExample: `import { Loader } from "@googlemaps/js-api-loader";\nconst loader = new Loader({ apiKey: "YOUR_KEY", version: "weekly" });\nconst google = await loader.load();\nnew google.maps.Map(document.getElementById("map"), { center: { lat: 40.7, lng: -74.0 }, zoom: 8 });`,
    useCases: ["Ride-sharing", "Delivery tracking", "Store locator"],
    pros: ["Accurate maps", "Street view", "Autocomplete"],
    docsLink: "https://developers.google.com/maps/documentation",
    difficulty: "intermediate",
    popularity: 5,
    authRequired: true,
    authType: "API Key",
    rateLimit: "Varies by service",
    pricing: "Pay-as-you-go",
    status: "active",
    tags: ["maps", "geolocation", "routing"],
    lastUpdated: "2023-11-20",
    freeTier: true,
    githubStars: "6K+",
  },
  {
    id: 6,
    name: "Spotify API",
    category: "music",
    icon: "üéµ",
    description: "Control playback and fetch music metadata.",
    problem: "Access 100M+ songs without hosting audio.",
    install: "npm install spotify-web-api-node",
    codeExample: `const SpotifyWebApi = require('spotify-web-api-node');\nconst spotify = new SpotifyWebApi({ accessToken: 'YOUR_TOKEN' });\nconst res = await spotify.searchTracks('Imagine Dragons');\nconsole.log(res.body.tracks.items[0].name);`,
    useCases: ["Music apps", "Playlists", "Music discovery"],
    pros: ["Huge catalog", "Personalization", "Playback control"],
    docsLink: "https://developer.spotify.com/documentation/web-api",
    difficulty: "intermediate",
    popularity: 5,
    authRequired: true,
    authType: "OAuth",
    rateLimit: "Depends on endpoint",
    pricing: "Free",
    status: "active",
    tags: ["music", "audio", "streaming"],
    lastUpdated: "2023-11-20",
    freeTier: true,
    githubStars: "7K+",
  },
  {
    id: 7,
    name: "YouTube Data API",
    category: "video",
    icon: "üì∫",
    description: "Access videos, playlists, channels, and search.",
    problem: "Get YouTube content without manual scraping.",
    install: "npm install googleapis",
    codeExample: `const { google } = require('googleapis');\nconst youtube = google.youtube({ version: 'v3', auth: 'YOUR_KEY' });\nconst res = await youtube.search.list({ part: 'snippet', q: 'coding tutorials' });\nconsole.log(res.data.items[0].snippet.title);`,
    useCases: ["Video apps", "Content curation", "Channel analytics"],
    pros: ["Huge video library", "Search support", "Metadata-rich"],
    docsLink: "https://developers.google.com/youtube/v3",
    difficulty: "intermediate",
    popularity: 5,
    authRequired: true,
    authType: "API Key / OAuth",
    rateLimit: "10,000 units/day (free tier)",
    pricing: "Freemium",
    status: "active",
    tags: ["video", "streaming", "search"],
    lastUpdated: "2023-11-20",
    freeTier: true,
    githubStars: "9K+",
  },
  {
    id: 8,
    name: "NASA API",
    category: "science",
    icon: "üöÄ",
    description: "Astronomy pictures, Mars rovers, satellites & more.",
    problem: "Get space data without NASA datasets locally.",
    install: "npm install nasa-api-wrapper",
    codeExample: `const fetch = require('node-fetch');\nconst res = await fetch('https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY');\nconst data = await res.json();\nconsole.log(data.title);`,
    useCases: ["Space apps", "Education tools", "AR/VR experiences"],
    pros: ["Free", "Wide datasets", "Fun visuals"],
    docsLink: "https://api.nasa.gov/",
    difficulty: "beginner",
    popularity: 4,
    authRequired: true,
    authType: "API Key",
    rateLimit: "Varies per endpoint",
    pricing: "Free",
    status: "active",
    tags: ["space", "science", "astronomy"],
    lastUpdated: "2023-11-20",
    freeTier: true,
    githubStars: "2K+",
  },
  {
    id: 9,
    name: "GitHub API",
    category: "developer-tools",
    icon: "üêô",
    description: "Access repositories, users, issues, and workflows on GitHub.",
    problem: "Fetch repo data and automate DevOps without manual GitHub UI.",
    install: "npm install @octokit/rest",
    codeExample: `const { Octokit } = require("@octokit/rest");\nconst octokit = new Octokit({ auth: 'YOUR_TOKEN' });\nconst { data } = await octokit.repos.get({ owner: 'octocat', repo: 'Hello-World' });\nconsole.log(data.full_name);`,
    useCases: ["CI/CD dashboards", "Repo analytics", "Open-source tools"],
    pros: ["Rich metadata", "Webhooks support", "GraphQL endpoint"],
    docsLink: "https://docs.github.com/en/rest",
    difficulty: "intermediate",
    popularity: 5,
    authRequired: true,
    authType: "OAuth / Token",
    rateLimit: "5,000 requests/hour",
    pricing: "Free",
    status: "active",
    tags: ["repos", "ci-cd", "opensource"],
    lastUpdated: "2023-11-20",
    freeTier: true,
    githubStars: "10K+",
  },
  // ------------------ IDs 10 to 35 ------------------
  {
    id: 10,
    name: "CoinGecko API",
    category: "finance",
    icon: "üí∞",
    description: "Cryptocurrency data, prices, and market info.",
    problem: "Track crypto prices without scraping exchanges.",
    install: "npm install coingecko-api",
    codeExample: `const CoinGecko = require('coingecko-api');\nconst client = new CoinGecko();\nconst data = await client.coins.fetch('bitcoin');\nconsole.log(data.data.market_data.current_price.usd);`,
    useCases: ["Crypto apps", "Portfolio trackers", "Market analysis"],
    pros: ["Free", "Reliable", "Detailed market info"],
    docsLink: "https://www.coingecko.com/en/api",
    difficulty: "beginner",
    popularity: 5,
    authRequired: false,
    authType: "None",
    rateLimit: "50 calls/minute",
    pricing: "Free",
    status: "active",
    tags: ["crypto", "finance", "market"],
    lastUpdated: "2023-11-20",
    freeTier: true,
    githubStars: "3K+",
  },
  {
    id: 11,
    name: "OpenAI API",
    category: "ai",
    icon: "ü§ñ",
    description: "Access GPT models for text, chat, and embeddings.",
    problem: "Generate AI text and content without training models.",
    install: "npm install openai",
    codeExample: `import OpenAI from 'openai';\nconst client = new OpenAI({ apiKey: 'YOUR_KEY' });\nconst res = await client.chat.completions.create({ model: 'gpt-4', messages: [{ role: 'user', content: 'Hello' }] });\nconsole.log(res.choices[0].message.content);`,
    useCases: ["Chatbots", "Content generation", "Code assistants"],
    pros: ["Powerful AI", "Versatile", "Easy SDKs"],
    docsLink: "https://platform.openai.com/docs",
    difficulty: "intermediate",
    popularity: 5,
    authRequired: true,
    authType: "API Key",
    rateLimit: "Varies by plan",
    pricing: "Pay-as-you-go",
    status: "active",
    tags: ["ai", "chatbot", "nlp"],
    lastUpdated: "2023-11-20",
    freeTier: false,
    githubStars: "15K+",
  },
  {
    id: 12,
    name: "HuggingFace API",
    category: "ai",
    icon: "üß†",
    description: "Transformers, NLP, and machine learning models.",
    problem: "Use pre-trained ML models without training infrastructure.",
    install: "npm install @huggingface/hfjs",
    codeExample: `import { HfInference } from '@huggingface/hfjs';\nconst hf = new HfInference('YOUR_KEY');\nconst output = await hf.textGeneration({ model: 'gpt2', inputs: 'Hello world' });\nconsole.log(output.generated_text);`,
    useCases: ["NLP apps", "Text generation", "ML experimentation"],
    pros: ["Pretrained models", "Wide coverage", "Easy integration"],
    docsLink: "https://huggingface.co/docs/api-inference",
    difficulty: "intermediate",
    popularity: 4,
    authRequired: true,
    authType: "API Key",
    rateLimit: "Depends on model",
    pricing: "Free tier available",
    status: "active",
    tags: ["ai", "ml", "nlp"],
    lastUpdated: "2023-11-20",
    freeTier: true,
    githubStars: "6K+",
  },
  {
    id: 13,
    name: "Firebase API",
    category: "backend",
    icon: "üî•",
    description: "Real-time database, authentication, and cloud functions.",
    problem: "Backend services without server management.",
    install: "npm install firebase",
    codeExample: `import { initializeApp } from 'firebase/app';\nconst app = initializeApp({ apiKey: 'YOUR_KEY', authDomain: 'YOUR_DOMAIN' });`,
    useCases: ["Mobile apps", "Web apps", "Realtime apps"],
    pros: ["Realtime DB", "Auth", "Serverless functions"],
    docsLink: "https://firebase.google.com/docs",
    difficulty: "beginner",
    popularity: 5,
    authRequired: true,
    authType: "API Key",
    rateLimit: "Depends on plan",
    pricing: "Free tier available",
    status: "active",
    tags: ["backend", "database", "realtime"],
    lastUpdated: "2023-11-20",
    freeTier: true,
    githubStars: "13K+",
  },
  {
    id: 14,
    name: "Supabase API",
    category: "backend",
    icon: "üóÑÔ∏è",
    description: "Open-source Firebase alternative with Postgres backend.",
    problem: "Realtime database and auth without Firebase lock-in.",
    install: "npm install @supabase/supabase-js",
    codeExample: `import { createClient } from '@supabase/supabase-js';\nconst supabase = createClient('URL', 'KEY');`,
    useCases: ["Web apps", "Realtime apps", "Databases"],
    pros: ["Open-source", "Postgres based", "Realtime subscriptions"],
    docsLink: "https://supabase.com/docs",
    difficulty: "beginner",
    popularity: 4,
    authRequired: true,
    authType: "API Key",
    rateLimit: "Depends on plan",
    pricing: "Free tier available",
    status: "active",
    tags: ["backend", "database", "realtime"],
    lastUpdated: "2023-11-20",
    freeTier: true,
    githubStars: "15K+",
  },
  {
  id: 15,
  name: "Pexels API",
  category: "media",
  icon: "üì∏",
  description: "Free stock photos and videos.",
  problem: "Access high-quality images/videos without hosting them.",
  install: "npm install pexels",
  codeExample: `const { createClient } = require('pexels');\nconst client = createClient('YOUR_KEY');\nconst photos = await client.photos.search({ query: 'nature', per_page: 1 });\nconsole.log(photos.photos[0].url);`,
  useCases: ["Web design", "Social media", "Blogs"],
  pros: ["High-quality", "Free media", "Simple API"],
  docsLink: "https://www.pexels.com/api/documentation/",
  difficulty: "beginner",
  popularity: 4,
  authRequired: true,
  authType: "API Key",
  rateLimit: "200 requests/hour",
  pricing: "Freemium",
  status: "active",
  tags: ["images", "videos", "stock"],
  lastUpdated: "2023-11-20",
  freeTier: true,
  githubStars: "2K+",
},
{
  id: 16,
  name: "Unsplash API",
  category: "media",
  icon: "üñºÔ∏è",
  description: "High-resolution free photos for personal and commercial use.",
  problem: "Fetch free images without hosting your own library.",
  install: "npm install unsplash-js",
  codeExample: `import { createApi } from 'unsplash-js';\nconst unsplash = createApi({ accessKey: 'YOUR_KEY' });\nconst result = await unsplash.search.getPhotos({ query: 'mountains', perPage: 1 });\nconsole.log(result.response.results[0].urls.full);`,
  useCases: ["Web design", "UI mockups", "Marketing"],
  pros: ["High-quality", "Extensive library", "Free for commercial use"],
  docsLink: "https://unsplash.com/developers",
  difficulty: "beginner",
  popularity: 5,
  authRequired: true,
  authType: "API Key",
  rateLimit: "50 requests/hour",
  pricing: "Free",
  status: "active",
  tags: ["images", "photos", "stock"],
  lastUpdated: "2023-11-20",
  freeTier: true,
  githubStars: "4K+",
},
{
  id: 17,
  name: "Mapbox API",
  category: "location",
  icon: "üó∫Ô∏è",
  description: "Customizable maps, geocoding, and navigation.",
  problem: "Add interactive maps without hosting GIS data.",
  install: "npm install mapbox-gl",
  codeExample: `import mapboxgl from 'mapbox-gl';\nmapboxgl.accessToken = 'YOUR_KEY';\nconst map = new mapboxgl.Map({ container: 'map', style: 'mapbox://styles/mapbox/streets-v11', center: [-74, 40.7], zoom: 9 });`,
  useCases: ["Navigation apps", "Delivery tracking", "Ride-sharing"],
  pros: ["Customizable", "Fast", "Detailed maps"],
  docsLink: "https://docs.mapbox.com/api/",
  difficulty: "intermediate",
  popularity: 5,
  authRequired: true,
  authType: "API Key",
  rateLimit: "50,000 requests/month (free tier)",
  pricing: "Freemium",
  status: "active",
  tags: ["maps", "navigation", "geolocation"],
  lastUpdated: "2023-11-20",
  freeTier: true,
  githubStars: "9K+",
},
{
  id: 18,
  name: "SendGrid API",
  category: "communication",
  icon: "‚úâÔ∏è",
  description: "Email delivery and marketing platform.",
  problem: "Send emails programmatically without SMTP setup.",
  install: "npm install @sendgrid/mail",
  codeExample: `const sgMail = require('@sendgrid/mail');\nsgMail.setApiKey('YOUR_KEY');\nawait sgMail.send({ to: 'test@example.com', from: 'you@example.com', subject: 'Hello', text: 'Hello World' });`,
  useCases: ["Email automation", "Transactional emails", "Marketing"],
  pros: ["Reliable", "Scalable", "Easy integration"],
  docsLink: "https://docs.sendgrid.com/api-reference/",
  difficulty: "intermediate",
  popularity: 5,
  authRequired: true,
  authType: "API Key",
  rateLimit: "100 requests/sec",
  pricing: "Freemium",
  status: "active",
  tags: ["email", "communication", "marketing"],
  lastUpdated: "2023-11-20",
  freeTier: true,
  githubStars: "6K+",
},
{
  id: 19,
  name: "PayPal API",
  category: "payments",
  icon: "üí∏",
  description: "Online payments, subscriptions, and transactions.",
  problem: "Accept payments without building banking infrastructure.",
  install: "npm install @paypal/checkout-server-sdk",
  codeExample: `const checkoutNodeJssdk = require('@paypal/checkout-server-sdk');\n// Setup client and create order`,
  useCases: ["E-commerce", "Subscriptions", "Marketplaces"],
  pros: ["Trusted", "Global", "Secure"],
  docsLink: "https://developer.paypal.com/docs/api/overview/",
  difficulty: "intermediate",
  popularity: 5,
  authRequired: true,
  authType: "OAuth",
  rateLimit: "Varies by plan",
  pricing: "Free to integrate, fees per transaction",
  status: "active",
  tags: ["payments", "transactions", "ecommerce"],
  lastUpdated: "2023-11-20",
  freeTier: true,
  githubStars: "7K+",
},
{
  id: 20,
  name: "Open Meteo API",
  category: "weather",
  icon: "üå¶Ô∏è",
  description: "Free weather forecasts and climate data.",
  problem: "Fetch weather data without paid subscriptions.",
  install: "npm install open-meteo",
  codeExample: `const fetch = require('node-fetch');\nconst res = await fetch('https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&hourly=temperature_2m');\nconst data = await res.json();\nconsole.log(data.hourly.temperature_2m);`,
  useCases: ["Weather apps", "Climate dashboards", "Agriculture"],
  pros: ["Free", "Hourly forecasts", "Global coverage"],
  docsLink: "https://open-meteo.com/en/docs",
  difficulty: "beginner",
  popularity: 4,
  authRequired: false,
  authType: "None",
  rateLimit: "Unlimited",
  pricing: "Free",
  status: "active",
  tags: ["weather", "forecast", "climate"],
  lastUpdated: "2023-11-20",
  freeTier: true,
  githubStars: "1K+",
},
{
  id: 21,
  name: "TMDB API",
  category: "entertainment",
  icon: "üé¨",
  description: "Movie, TV shows, and actor metadata.",
  problem: "Access entertainment metadata without scraping websites.",
  install: "npm install tmdbv3",
  codeExample: `const TMDB = require('tmdbv3');\nconst client = new TMDB('YOUR_KEY');\nconst movie = await client.movies.get({ id: 550 });\nconsole.log(movie.title);`,
  useCases: ["Movie apps", "Entertainment dashboards", "Recommendation engines"],
  pros: ["Rich metadata", "Images and trailers", "Free tier"],
  docsLink: "https://developers.themoviedb.org/3",
  difficulty: "beginner",
  popularity: 5,
  authRequired: true,
  authType: "API Key",
  rateLimit: "40 requests/10 seconds",
  pricing: "Freemium",
  status: "active",
  tags: ["movies", "tv", "entertainment"],
  lastUpdated: "2023-11-20",
  freeTier: true,
  githubStars: "5K+",
},
{
  id: 22,
  name: "NewsData.io API",
  category: "news",
  icon: "üóûÔ∏è",
  description: "Global news content API.",
  problem: "Access news from multiple sources easily.",
  install: "npm install newsdata-api",
  codeExample: `const NewsData = require('newsdata-api');\nconst news = new NewsData('YOUR_KEY');\nconst res = await news.getTopHeadlines({ country: 'us' });\nconsole.log(res.articles[0].title);`,
  useCases: ["News apps", "Analytics", "Monitoring"],
  pros: ["Global sources", "Easy JSON access", "Free tier available"],
  docsLink: "https://newsdata.io/docs",
  difficulty: "beginner",
  popularity: 4,
  authRequired: true,
  authType: "API Key",
  rateLimit: "200 requests/day",
  pricing: "Freemium",
  status: "active",
  tags: ["news", "headlines", "media"],
  lastUpdated: "2023-11-20",
  freeTier: true,
  githubStars: "1K+",
},
{
  id: 23,
  name: "IP Geolocation API",
  category: "location",
  icon: "üìç",
  description: "Get location info based on IP addresses.",
  problem: "Determine user location without GPS.",
  install: "npm install ipgeolocation-api",
  codeExample: `const Geo = require('ipgeolocation-api');\nconst geo = new Geo('YOUR_KEY');\nconst res = await geo.getGeolocation({ ip: '8.8.8.8' });\nconsole.log(res.country_name);`,
  useCases: ["Geo targeting", "Analytics", "Security"],
  pros: ["Fast", "Accurate", "Worldwide coverage"],
  docsLink: "https://ipgeolocation.io/documentation",
  difficulty: "beginner",
  popularity: 4,
  authRequired: true,
  authType: "API Key",
  rateLimit: "1000 requests/day",
  pricing: "Freemium",
  status: "active",
  tags: ["ip", "location", "geolocation"],
  lastUpdated: "2023-11-20",
  freeTier: true,
  githubStars: "1K+",
},
{
  id: 24,
  name: "DeepAI API",
  category: "ai",
  icon: "ü§Ø",
  description: "AI image, text, and video generation.",
  problem: "Use AI models without hosting them.",
  install: "npm install deepai",
  codeExample: `const deepai = require('deepai');\ndeepai.setApiKey('YOUR_KEY');\nconst resp = await deepai.callStandardApi('text2img', { text: 'A sunset over mountains' });\nconsole.log(resp.output_url);`,
  useCases: ["AI art", "Content creation", "Prototyping"],
  pros: ["Easy API", "Variety of AI models", "Free tier available"],
  docsLink: "https://deepai.org/machine-learning-api",
  difficulty: "intermediate",
  popularity: 4,
  authRequired: true,
  authType: "API Key",
  rateLimit: "200 requests/day",
  pricing: "Freemium",
  status: "active",
  tags: ["ai", "image", "text"],
  lastUpdated: "2023-11-20",
  freeTier: true,
  githubStars: "2K+",
},
{
  id: 25,
  name: "Currency Exchange API",
  category: "finance",
  icon: "üí±",
  description: "Real-time currency conversion rates.",
  problem: "Get exchange rates without manual lookup.",
  install: "npm install currency-api",
  codeExample: `const fetch = require('node-fetch');\nconst res = await fetch('https://api.exchangerate.host/latest?base=USD');\nconst data = await res.json();\nconsole.log(data.rates.EUR);`,
  useCases: ["Finance apps", "E-commerce pricing", "Travel tools"],
  pros: ["Free tier", "Reliable", "Simple API"],
  docsLink: "https://exchangerate.host/#/#docs",
  difficulty: "beginner",
  popularity: 4,
  authRequired: false,
  authType: "None",
  rateLimit: "Unlimited",
  pricing: "Free",
  status: "active",
  tags: ["currency", "finance", "exchange"],
  lastUpdated: "2023-11-20",
  freeTier: true,
  githubStars: "1K+",
},
{
  id: 26,
  name: "OpenAI Whisper API",
  category: "ai",
  icon: "üé§",
  description: "Speech-to-text AI transcription.",
  problem: "Convert audio to text without manual transcription.",
  install: "npm install openai",
  codeExample: `import OpenAI from 'openai';\nconst client = new OpenAI({ apiKey: 'YOUR_KEY' });\nconst transcription = await client.audio.transcriptions.create({ file: 'audio.mp3', model: 'whisper-1' });\nconsole.log(transcription.text);`,
  useCases: ["Transcription", "Voice apps", "Subtitles"],
  pros: ["Accurate", "Supports multiple languages", "Easy SDKs"],
  docsLink: "https://platform.openai.com/docs/guides/speech-to-text",
  difficulty: "intermediate",
  popularity: 5,
  authRequired: true,
  authType: "API Key",
  rateLimit: "Varies by plan",
  pricing: "Pay-as-you-go",
  status: "active",
  tags: ["ai", "speech", "transcription"],
  lastUpdated: "2023-11-20",
  freeTier: false,
  githubStars: "5K+",
},
{
  id: 27,
  name: "JokeAPI",
  category: "entertainment",
  icon: "üòÇ",
  description: "Fetch jokes programmatically for apps or bots.",
  problem: "Add humor without manually collecting jokes.",
  install: "npm install jokeapi",
  codeExample: `const fetch = require('node-fetch');\nconst res = await fetch('https://v2.jokeapi.dev/joke/Any');\nconst joke = await res.json();\nconsole.log(joke.setup || joke.joke);`,
  useCases: ["Chatbots", "Fun apps", "Entertainment"],
  pros: ["Free", "Multiple categories", "Easy JSON API"],
  docsLink: "https://jokeapi.dev/",
  difficulty: "beginner",
  popularity: 4,
  authRequired: false,
  authType: "None",
  rateLimit: "Unlimited",
  pricing: "Free",
  status: "active",
  tags: ["jokes", "fun", "entertainment"],
  lastUpdated: "2023-11-20",
  freeTier: true,
  githubStars: "2K+",
},
{
  id: 28,
  name: "Numbers API",
  category: "education",
  icon: "üî¢",
  description: "Facts about numbers, math, dates, and trivia.",
  problem: "Access number trivia without building your own database.",
  install: "npm install numbers-api",
  codeExample: `const fetch = require('node-fetch');\nconst res = await fetch('http://numbersapi.com/42');\nconst fact = await res.text();\nconsole.log(fact);`,
  useCases: ["Trivia apps", "Education", "Games"],
  pros: ["Fun", "Lightweight", "Free"],
  docsLink: "http://numbersapi.com/#42",
  difficulty: "beginner",
  popularity: 4,
  authRequired: false,
  authType: "None",
  rateLimit: "Unlimited",
  pricing: "Free",
  status: "active",
  tags: ["numbers", "trivia", "math"],
  lastUpdated: "2023-11-20",
  freeTier: true,
  githubStars: "1K+",
}
];
